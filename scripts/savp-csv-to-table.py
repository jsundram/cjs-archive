import csv
import dateparser
import os
import shutil

"""
for savp.csv, which was generated by:
1. opening "Website SAVP.xlsx" in the Dropbox folder
2. editing with Numbers on mac (sigh)
3. exporting to csv.
4. opening in vim,
5. Fixing the smart quotes in the bio blurb
6. Fixing the apostrophe in "Ending Abuse ..."
7. Fixing the apostrophe in the podcast episode
8. replacing the smart quotes with double-regular quotes (one to fix, one to escape) in the podcast episodes
"""

def format_date(date_str):
    # Converts M/D/YYYY to YYYY-MM-DD
    try:
        return dateparser.parse(date_str).strftime('%Y-%m-%d')
    except ValueError:
        print(f"error parsing: {date_str}")
        return date_str  # Fallback if date is malformed


def main(data_file, template_file, output_file):
    # destination for copied files:
    assets_origin = '/Users/jsundram/Dropbox/Archive of CJS/Special Advisor/'
    pdf_files = {f.lower(): os.path.join(assets_origin, f) for f in os.listdir(assets_origin)}
    assets_destination = '../docs/assets/savp/'

    rows_html = []
    with open(data_file, newline='', encoding='utf-8') as csvfile:
        next(csvfile) # page title
        blurb = next(csvfile).strip().strip(',').strip('"')

        reader = csv.DictReader(csvfile)
        for row in reader:
            date = format_date(row['Date'])
            media = row['Type']
            title = row['Title']
            description = row['Description']
            url = row['URL']
            if url == 'PDF':
                key = title.lower().replace(':', '-') + ".pdf"
                source = pdf_files[key]
                shutil.copyfile(source, os.path.join(assets_destination, key))
                url = './assets/savp/' + key

            rows_html.append(f"""
            <tr class="border-t border-t-[#d3dbe4]">
              <td class="h-[72px] px-4 py-2 w-[400px] text-[#58728d] text-sm font-normal leading-normal">
                {date}
              </td>
              <td class="h-[72px] px-4 py-2 w-60 text-sm font-normal leading-normal">
                <button class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-full h-8 px-4 bg-[#e9edf1] text-[#101419] text-sm font-medium leading-normal w-full">
                  <span class="truncate">{media}</span>
                </button>
              </td>
              <td class="h-[72px] px-4 py-2 w-[400px] text-[#101419] text-sm font-normal leading-normal">
                <a href="{url}" target="_blank" class="underline hover:text-blue-600">{title.upper()}</a>
              </td>
              <td class="h-[72px] px-4 py-2 w-[400px] text-[#58728d] text-sm font-normal leading-normal">
                {description}
              </td>
            </tr>
            """)

    # Output the combined HTML
    rows = "\n".join(rows_html)

    # Load template
    with open(template_file) as f:
        template = f.read()

    # Populate template
    # .format would be great but if there are braces in the html it will barf
    # html_output = template.format(blurb=blurb, rows=rows)
    for txt, data in [('{blurb}', blurb), ('{rows}', rows)]:
        template = template.replace(txt, data)

    # Save result
    with open(output_file, 'w') as f:
        f.write(template)
        print(f"âœ… HTML written to {output_file}")


if __name__ == '__main__':
    main('../data/savp.csv', 'savp-template.html', '../docs/special-advisor.html')
